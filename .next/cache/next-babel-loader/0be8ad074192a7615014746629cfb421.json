{"ast":null,"code":"import fetch from 'node-fetch';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloClient } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-boost';\nimport { HttpLink } from 'apollo-boost'; //const link = new HttpLink({ uri : 'https://testing-hasura-me.herokuapp.com/v1/graphql'});\n\nconst link = createHttpLink({\n  uri: 'https://glikaki.herokuapp.com/v1/graphql',\n  fetch: fetch\n});\nconst resolvers = {};\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n  resolvers\n});\nlet cacheData = undefined;\n\ntry {\n  cacheData = client.readQuery({\n    mainQuery\n  });\n} catch (error) {\n  console.log(\"No client data yet\");\n  console.log(error);\n  cacheData = {};\n}\n\nlet changed = true; // <INSERT INITIALIZATION CODE HERE>\n\nif (changed) {\n  client.writeQuery({\n    mainQuery,\n    data: cacheData\n  });\n} // const { mydata } = client.readQuery({\n//     query: gql`\n//       query myQuery {\n//         Artist {\n//           Name\n//           ArtistId\n//         }\n//         Album {\n//           Title\n//           AlbumId\n//         }\n//       }\n//     `,\n//   });\n\n\nexport default client;","map":{"version":3,"sources":["/Users/marinoschrysanthou/Desktop/nextjs-apollo-connect-test/src/client.js"],"names":["fetch","createHttpLink","ApolloClient","InMemoryCache","HttpLink","link","uri","resolvers","client","cache","cacheData","undefined","readQuery","mainQuery","error","console","log","changed","writeQuery","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,QAAT,QAAyB,cAAzB,C,CAGA;;AACA,MAAMC,IAAI,GAAGJ,cAAc,CAAC;AAAEK,EAAAA,GAAG,EAAE,0CAAP;AAAmDN,EAAAA,KAAK,EAAEA;AAA1D,CAAD,CAA3B;AACA,MAAMO,SAAS,GAAG,EAAlB;AACA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC5BO,EAAAA,KAAK,EAAG,IAAIN,aAAJ,EADoB;AAE5BE,EAAAA,IAF4B;AAG5BE,EAAAA;AAH4B,CAAjB,CAAf;AAQI,IAAIG,SAAS,GAAGC,SAAhB;;AAEA,IAAI;AACAD,EAAAA,SAAS,GAAGF,MAAM,CAACI,SAAP,CAAiB;AAAEC,IAAAA;AAAF,GAAjB,CAAZ;AACH,CAFD,CAEE,OAAOC,KAAP,EAAc;AACZC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAJ,EAAAA,SAAS,GAAG,EAAZ;AACH;;AAED,IAAIO,OAAO,GAAG,IAAd,C,CAEA;;AAEA,IAAIA,OAAJ,EAAa;AACTT,EAAAA,MAAM,CAACU,UAAP,CAAkB;AACdL,IAAAA,SADc;AAEdM,IAAAA,IAAI,EAAET;AAFQ,GAAlB;AAIH,C,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeF,MAAf","sourcesContent":["import fetch from 'node-fetch';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloClient } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-boost';\nimport { HttpLink } from 'apollo-boost';\n\n\n//const link = new HttpLink({ uri : 'https://testing-hasura-me.herokuapp.com/v1/graphql'});\nconst link = createHttpLink({ uri: 'https://glikaki.herokuapp.com/v1/graphql', fetch: fetch });\nconst resolvers = {}\nconst client = new ApolloClient({ \n    cache : new InMemoryCache(), \n    link, \n    resolvers \n});\n\n\n\n    let cacheData = undefined\n\n    try {\n        cacheData = client.readQuery({ mainQuery })\n    } catch (error) {\n        console.log(\"No client data yet\")\n        console.log(error)\n        cacheData = {}\n    }\n\n    let changed = true\n\n    // <INSERT INITIALIZATION CODE HERE>\n\n    if (changed) {\n        client.writeQuery({\n            mainQuery,\n            data: cacheData,\n        })\n    }\n\n// const { mydata } = client.readQuery({\n//     query: gql`\n//       query myQuery {\n//         Artist {\n//           Name\n//           ArtistId\n//         }\n//         Album {\n//           Title\n//           AlbumId\n//         }\n//       }\n//     `,\n//   });\n\nexport default client;"]},"metadata":{},"sourceType":"module"}