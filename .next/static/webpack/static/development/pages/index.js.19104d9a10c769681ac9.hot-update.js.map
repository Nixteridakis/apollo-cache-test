{"version":3,"file":"static/webpack/static/development/pages/index.js.19104d9a10c769681ac9.hot-update.js","sources":["webpack:///./src/App.js","webpack:///./src/client.js","webpack:///./src/queries.js"],"sourcesContent":["import React, {useState} from 'react';\nimport { Button } from '@material-ui/core';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport Link from 'next/link' ;\n\nimport {MAIN_QUERY, mainQueryCache} from './queries';\nimport client from './client'\n\nimport Welcome from \"./Welcome\"\n\nimport Myradio from './Myradio'\nimport Myresult from './Myresult.js'\nimport { UserContext } from './UserContext';\n\nconst App = () => {\n\n  const [store, setStore] = useState('first');\n  const { data } = useQuery(MAIN_QUERY);\n\n  return (\n    <UserContext.Provider value={[store,setStore]}>\n      <div className=\"App\">\n        <header className=\"App-header\"> Select an artist</header>\n        <Myradio />\n        <Myresult data={data}/>\n      </div>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;","import fetch from 'node-fetch';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloClient } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-boost';\nimport { HttpLink } from 'apollo-boost';\n\nimport {MAIN_QUERY} from './queries';\nimport { useQuery } from '@apollo/react-hooks';\n\n//const link = new HttpLink({ uri : 'https://testing-hasura-me.herokuapp.com/v1/graphql'});\nconst link = createHttpLink({ uri: 'https://glikaki.herokuapp.com/v1/graphql', fetch: fetch });\nconst resolvers = {}\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({ \n    cache, \n    link, \n    resolvers \n});\n\n\nlet cacheData = undefined\n\ntry {\n    cacheData = client.readQuery({ query: MAIN_QUERY })\n    console.log('found it!!!!!!!!!!')\n} catch (error) {\n    console.log(\"No client data yet\")\n    console.log(error)\n    cacheData = {}\n}\n\n// let changed = true\n\n// <INSERT INITIALIZATION CODE HERE>\n\n// if (changed) {\n//     client.writeQuery({\n//         query: mainQuery,\n//         data: cacheData,\n//     })\n// }\n\n// const { mydata } = client.readQuery({\n//     query: gql`\n//       query myQuery {\n//         Artist {\n//           Name\n//           ArtistId\n//         }\n//         Album {\n//           Title\n//           AlbumId\n//         }\n//       }\n//     `,\n//   });\n\nexport default client;","import gql from 'graphql-tag';\n\nexport const MAIN_QUERY = gql`{\n    Artist(where: {ArtistId: {_eq: $_eq}}) {\n      Name\n      ArtistId\n    }\n}`;\n\n\n// const GET_DOG_PHOTO = gql`\n//   query Dog($breed: String!) {\n//     dog(breed: $breed) {\n//       id\n//       displayImage\n//     }\n//   }\n// `;\n\nexport const mainQueryCache = gql`{\n  Artist @client {\n    Name\n    ArtistId\n  }\n  Album @client {\n    Title\n    AlbumId\n  }\n}\n`;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}